document.addEventListener("DOMContentLoaded", function () {
    const map = L.map("map").setView([53.6778, 23.8298], 12);

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "&copy; OpenStreetMap contributors"
    }).addTo(map);

    // ======= Координаты зоны Гродно (GeoJSON) =======
    const zoneCoords = [
        [23.81385406040252, 53.721694813883005],
        [23.809046127327406, 53.71048473198701],
        [23.795823493831904, 53.70870829217054],
        [23.796368358867255, 53.702469091902685],
        [23.800616630509694, 53.696263639124595],
        [23.800614238720613, 53.68580421572955],
        [23.802498092390067, 53.68431602601626],
        [23.806776521232763, 53.68287365800853],
        [23.80271283300732, 53.675742617073524],
        [23.798137244254036, 53.67578801540503],
        [23.79406309920219, 53.673794778951276],
        [23.790210078753645, 53.669726017330035],
        [23.78846680746917, 53.667599766681],
        [23.78615972406331, 53.6660246938865],
        [23.78557166577702, 53.66617555249294],
        [23.784166079915746, 53.665992357122846],
        [23.78322435341922, 53.665819183007926],
        [23.781343266166342, 53.66585092243159],
        [23.780993336868704, 53.66578788338841],
        [23.780681981037734, 53.66548579750854],
        [23.777582608054196, 53.66636601924471],
        [23.774511027877317, 53.66727999942029],
        [23.77470744154193, 53.66759821734841],
        [23.77344125656569, 53.66740869276163],
        [23.77313490194787, 53.667638902408044],
        [23.77258067329631, 53.66753273875215],
        [23.77198073843644, 53.66693914061925],
        [23.77272913670003, 53.66650124902962],
        [23.772883354264636, 53.665955036846476],
        [23.773488879744775, 53.66563439847758],
        [23.77414011143129, 53.66550332531283],
        [23.774905526866156, 53.66524118435742],
        [23.775510970575006, 53.66478947786402],
        [23.77455644806601, 53.6634143850507],
        [23.774074585646495, 53.663172174480465],
        [23.773364192189398, 53.66311954026098],
        [23.773497416332525, 53.66237783400356],
        [23.773767946264055, 53.6585816067406],
        [23.77483833482887, 53.65878028968493],
        [23.77500235108603, 53.65704424979782],
        [23.774874565084556, 53.65438875190565],
        [23.774796912376644, 53.65378581787563],
        [23.775450558989547, 53.65323706060502],
        [23.776575027386208, 53.65276258433538],
        [23.777666538809033, 53.65220665876786],
        [23.778870812656578, 53.65248613780463],
        [23.78217948271788, 53.6487198497434],
        [23.7934668012781, 53.65250774641774],
        [23.817417161374124, 53.64487690524459],
        [23.815520988178633, 53.64049778031125],
        [23.80653403359591, 53.6331555510543],
        [23.796551208940542, 53.619301750378554],
        [23.809238602358164, 53.61483271664508],
        [23.81522211063617, 53.61121504394566],
        [23.820112897653388, 53.609839058305056],
        [23.819713338363073, 53.608123621112526],
        [23.82320954888027, 53.60923885280329],
        [23.865747548720634, 53.61685868394687],
        [23.87473626037763, 53.61935430689533],
        [23.883915577787405, 53.62986321656052],
        [23.884421666324158, 53.63370261056701],
        [23.881965556523824, 53.63813617356712],
        [23.888169466169046, 53.6549553406027],
        [23.888245488943824, 53.6603188736932],
        [23.887026731977613, 53.66315334888205],
        [23.8845255137758, 53.66665292284611],
        [23.876969649786332, 53.66883621975879],
        [23.868102236876098, 53.67060829571548],
        [23.861625123601016, 53.67137662272253],
        [23.863705714562656, 53.68053012712548],
        [23.86190567457021, 53.68395822369038],
        [23.854939281914852, 53.68828094989345],
        [23.852547817226366, 53.69017545213225],
        [23.852845967401123, 53.69188792834308],
        [23.857538961914145, 53.694608430718404],
        [23.858842735275175, 53.697561374509405],
        [23.859536205845927, 53.70364757208782],
        [23.863028210300797, 53.70520993153676],
        [23.876032044448863, 53.71525427531907],
        [23.888827008882004, 53.72057479860581],
        [23.888584779012945, 53.72166808937283],
        [23.876197095396236, 53.727772693476766],
        [23.8714309221713, 53.72461876630513],
        [23.863996948573913, 53.72252743835051],
        [23.861003362401675, 53.717980793471725],
        [23.840624305490735, 53.720421905171605],
        [23.822248263776316, 53.72267239198439],
        [23.82006066090463, 53.72267261784651],
        [23.81389876346941, 53.721763548371854],
        [23.81385406040252, 53.721694813883005]
        ];

    // Создание полигона и отображение его на карте
    const latLngZone = zoneCoords.map(p => [p[1], p[0]]);
    const polygon = L.polygon(latLngZone, {
        color: 'purple',
        fillColor: '#e5ccff',
        fillOpacity: 0.3
    }).addTo(map);

    // Проверка попадания точки в полигон
    function isInsidePolygon(latlng) {
        return leafletPolyContains(polygon, latlng);
    }

    // Простая реализация point-in-polygon
    function leafletPolyContains(polygon, latlng) {
        const x = latlng.lat;
        const y = latlng.lng;
        let inside = false;
        const polyPoints = polygon.getLatLngs()[0];

        for (let i = 0, j = polyPoints.length - 1; i < polyPoints.length; j = i++) {
            const xi = polyPoints[i].lat, yi = polyPoints[i].lng;
            const xj = polyPoints[j].lat, yj = polyPoints[j].lng;

            const intersect = ((yi > y) !== (yj > y)) &&
                (x < ((xj - xi) * (y - yi)) / (yj - yi) + xi);
            if (intersect) inside = !inside;
        }
        return inside;
    }

    // Получение случайной точки внутри bounding box полигона
    function getRandomPointInPolygon() {
        const bounds = polygon.getBounds();
        let point;
        let tries = 0;
        do {
            const lat = bounds.getSouth() + Math.random() * (bounds.getNorth() - bounds.getSouth());
            const lng = bounds.getWest() + Math.random() * (bounds.getEast() - bounds.getWest());
            point = L.latLng(lat, lng);
            tries++;
        } while (!isInsidePolygon(point) && tries < 1000);
        return point;
    }

    // Генерация маркеров в зоне
    for (let i = 0; i < 25; i++) {
        const coords = getRandomPointInPolygon();
        const marker = L.marker(coords).addTo(map).bindPopup("Свободный автомобиль");

        let assignedCarId = null;

        marker.on("click", async function () {
            if (typeof isLoggedIn === "undefined") {
                console.error("isLoggedIn не определен");
                return;
            }

            if (!isLoggedIn) {
                const modal = document.getElementById("modal");
                if (modal) {
                    modal.style.display = "flex";
                } else {
                    console.error("Модальное окно не найдено");
                }
                return;
            }

            if (!assignedCarId) {
                try {
                    const response = await fetch("get_random_car.php");
                    const data = await response.json();

                    if (data.success) {
                        assignedCarId = data.id;
                        window.location.href = "order.php?id=" + assignedCarId;
                    } else {
                        alert("Нет доступных машин");
                    }
                } catch (error) {
                    console.error("Ошибка получения машины", error);
                }
            } else {
                window.location.href = "order.php?id=" + assignedCarId;
            }
        });
    }
});
